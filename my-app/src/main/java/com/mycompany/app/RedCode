//OGC from Availability_Bush + same for Availability_Waterloo

//        void v_update_Bush_to_Zero(int itime) throws SQLException {
//            String s=String.valueOf(itime);
//            String sql = "UPDATE CURICULUM.availability_halls_bush_house " +
//                    "     SET available = 0 " +
//                    "     WHERE hour = " + s;
//
//
//            PreparedStatement preparedStmt = connection.prepareStatement(sql);
//            preparedStmt.execute();
//            preparedStmt.close();
//        }
//
//        void v_update_Bush_to_One(int itime) throws SQLException {
//            String s=String.valueOf(itime);
//            String sql = "UPDATE CURICULUM.availability_halls_bush_house " +
//                "     SET available = 1 " +
//                "     WHERE hour = " + s;
//
//
//            PreparedStatement preparedStmt = connection.prepareStatement(sql);
//            preparedStmt.execute();
//            preparedStmt.close();
//        }
//
//        boolean b_checkAvailableAt(int itime) throws SQLException {
//            String s=String.valueOf(itime);
//            Statement stmt = connection.createStatement();
//            String sql = "SELECT available " +
//                    "     FROM curiculum.timeslots " +
//                    "     WHERE  hour = " + s;
//
//
//            ResultSet rs = stmt.executeQuery(sql);
//            stmt.close();
//
//            if(rs.getInt("available") == 1){
//                rs.close();
//                return true;
//            }
//            else{ rs.close(); return  false; }
//
//        }




    //OGC from Greedy Algorithm
//
//    private void vgenerateTableAvailabilityOfHalls()throws SQLException{
//        //1.start by assigning the lectures in the timeslots available from the week days
//        //2.assign the students to the lectures following the simple rules of the hard constraints
//        //3.
//        // find a suitable layout of tutorials and lectures . Only Lectures first. since tutorials are not yet inserted
//        int iCounter = 0;
//        ArrayList<String> mylist = new ArrayList<>();
//        mylist.add("Monday");
//        mylist.add("Tuesday");
//        mylist.add("Wednesday");
//        mylist.add("Thursday");
//        mylist.add("Friday");
//        String sql22 = "SELECT abreviation,hours_twoweeks FROM s_courses WHERE hours_twoweeks != 0";
//        Statement statement = connection.createStatement();
//        ResultSet resSet = statement.executeQuery(sql22);
//        int index = 0;
//        while(resSet.next()){
//            String abrev = resSet.getString("abreviation");
//            int iHours = resSet.getInt("hours_twoweeks")/2;
//            initial.add(new Duplet(abrev,iHours));
//            initial.add(new Duplet(abrev,iHours));
//            System.out.println(initial.get(index));
//            index++;
//            index++;
//        }
//        int sum = 0;
//        for(int i = 0; i < initial.size(); i++){
//            sum += initial.get(i).getiHours();
//        }
//        System.out.println("Sum:" + sum);
//        //create a table of assigned lectures:
//        String sql99 = "DROP TABLE IF EXISTS assigned_lects";
//        String sql33 = "DROP TABLE IF EXISTS halls_availability_tweeks";
//        String sql11 =
//                "CREATE TABLE assigned_lects(" +
//                        "ABBREV VARCHAR(10), " +
//                        "HOURS INT(2), " +
//                        "HALL VARCHAR(30)," +
//                        "DAYTIME INT(4))";
//        String sql88 =
//                "CREATE TABLE halls_availability_tweeks(" +
//                        "AVAILABLE INT(1)," +
//                        "HALL VARCHAR(10)," +
//                        "HOUR INT(2), " +
//                        "DAY VARCHAR(10))";
//        String sql44 = "SELECT AVAILABLE, HALL, HOUR FROM availability_halls_bush_house";
//        String sql55 = "SELECT AVAILABLE, HALL, HOUR FROM availability_halls_waterloo";
//        String sql66 = "INSERT INTO halls_availability_tweeks VALUES( ?,?,?,? )";
//
//
//        statement.executeUpdate(sql99);
//        statement.executeUpdate(sql11);
//        statement.executeUpdate(sql33);
//        statement.executeUpdate(sql88);
//
//        ResultSet rst1 = statement.executeQuery(sql44);
//        PreparedStatement prst = connection.prepareStatement(sql66);
//        while(!mylist.isEmpty()){
//            //iCounter++;
//            while(rst1.next()){
//                prst.setInt(1, rst1.getInt("AVAILABLE"));
//                prst.setString(2, rst1.getString("HALL"));
//                prst.setInt(3, rst1.getInt("HOUR"));
//                prst.setString(4, mylist.get(iCounter));
//                prst.executeUpdate();
//            }
//            //System.out.println("Removed" + mylist.get(iCounter));
//            mylist.remove(iCounter);
//            rst1.beforeFirst();
//        }
//
//    }

    //


/*
    private Double d_TotalHoursOfHallsAvailable_Bush_House(String sStardDate, String sEndDate) throws ParseException, SQLException {

            double dHours = 0.0;
            Date date1 = new SimpleDateFormat("dd-MMM-yyyy").parse(sStardDate);
            Date date2 = new SimpleDateFormat("dd-MMM-yyyy").parse(sEndDate);
            String sql34 = "";
            PreparedStatement prst;
            if(date1.getMonth() != date2.getMonth() && date2.getMonth() - date1.getMonth() == 1){
                sql34 = " SELECT COUNT(*) FROM two_weeks_availability_halls_bush_house WHERE AVAILABLE = 1 AND MONTH = ? AND DATE >= ? " +
                        " UNION " +
                        " SELECT COUNT(*) FROM two_weeks_availability_halls_bush_house WHERE AVAILABLE = 1 AND MONTH = ? AND DATE <= ? ";
                prst = connection.prepareStatement(sql34);
                prst.setInt(1, date1.getMonth());
                prst.setInt(2, date1.getDate());
                prst.setInt(3, date2.getMonth());
                prst.setInt(4,date2.getDate());
            }
            else {
                sql34 = " SELECT COUNT(*) FROM two_weeks_availability_halls_bush_house WHERE AVAILABLE = 1 AND MONTH = ? AND DATE >= ? UNION";
                int iCounter = 1;
                int iSecondCounter = 0;

                for (int i = date1.getMonth() + 1; i < date2.getMonth(); i++) {
                    sql34 += " SELECT COUNT(*) FROM two_weeks_availability_halls_bush_house WHERE AVAILABLE = 1 AND MONTH = ? UNION ";
                    iSecondCounter++;
                }
                sql34 += " SELECT COUNT(*) FROM two_weeks_availability_halls_bush_house WHERE AVAILABLE = 1 AND MONTH = ? AND DATE <= ?";


                prst = connection.prepareStatement(sql34);
                prst.setInt(iCounter, date1.getMonth());
                prst.setInt(++iCounter, date1.getDate());
                for (int i = 1; i < iSecondCounter + 1; i++) {
                    prst.setInt(++iCounter, date2.getMonth() - i);
                }
                prst.setInt(++iCounter, date2.getMonth()); //check this
                prst.setInt(++iCounter, date2.getDate());    //check this

            }
            ResultSet rst = prst.executeQuery();
            double dSum = 0.0;
            while (rst.next()){
                dSum += rst.getInt(1);
            }


            return dSum/2;
        }
        private Double d_TotalHoursOfHallsAvailable_Waterloo(String sStardDate, String sEndDate) throws ParseException, SQLException {
            double dHours = 0.0;
            Date date1 = new SimpleDateFormat("dd-MMM-yyyy").parse(sStardDate);
            Date date2 = new SimpleDateFormat("dd-MMM-yyyy").parse(sEndDate);
            String sql34 = "";
            PreparedStatement prst;
            if(date1.getMonth() != date2.getMonth() && date2.getMonth() - date1.getMonth() == 1){
                sql34 = " SELECT * FROM two_weeks_availability_halls_waterloo WHERE AVAILABLE = 1 AND MONTH = ? AND DATE >= ? " +
                        " UNION " +
                        " SELECT * FROM two_weeks_availability_halls_waterloo WHERE AVAILABLE = 1 AND MONTH = ? AND DATE <= ? ";
                prst = connection.prepareStatement(sql34);
                prst.setInt(1, date1.getMonth());
                prst.setInt(2, date1.getDate());
                prst.setInt(3, date2.getMonth());
                prst.setInt(4,date2.getDate());
            }
            else {
                sql34 = " SELECT COUNT(*) FROM two_weeks_availability_waterloo WHERE AVAILABLE = 1 AND MONTH = ? AND DATE >= ? UNION";
                int iCounter = 1;
                int iSecondCounter = 0;

                for (int i = date1.getMonth() + 1; i < date2.getMonth(); i++) {
                    sql34 += " SELECT COUNT(*) FROM two_weeks_availability_waterloo WHERE AVAILABLE = 1 AND MONTH = ? UNION ";
                    iSecondCounter++;
                }
                sql34 += " SELECT COUNT(*) FROM two_weeks_availability_waterloo WHERE AVAILABLE = 1 AND MONTH = ? AND DATE <= ?";


                prst = connection.prepareStatement(sql34);
                prst.setInt(iCounter, date1.getMonth());
                prst.setInt(++iCounter, date1.getDate());
                for (int i = 1; i < iSecondCounter + 1; i++) {
                    prst.setInt(++iCounter, date2.getMonth() - i);
                }
                prst.setInt(++iCounter, date2.getMonth()); //check this
                prst.setInt(++iCounter, date2.getDate());    //check this

            }
            ResultSet rst = prst.executeQuery();
            double dSum = 0.0;
            while (rst.next()){
                dSum += rst.getInt(1);
            }


            return dSum/2;
        }
        private Double d_TotalHoursOfHallsAvailable_Waterloo_SpecificHall(String sName, String sStardDate, String sEndDate) throws ParseException, SQLException {
            double dHours = 0.0;
            Date date1 = new SimpleDateFormat("dd-MMM-yyyy").parse(sStardDate);
            Date date2 = new SimpleDateFormat("dd-MMM-yyyy").parse(sEndDate);
            String sql34 = "";
            PreparedStatement prst;
            if(date1.getMonth() != date2.getMonth() && date2.getMonth() - date1.getMonth() == 1){
                sql34 = " SELECT COUNT(*) FROM two_weeks_availability_halls_waterloo WHERE AVAILABLE = 1 AND MONTH = ? AND DATE >= ? AND HALL = ?" +
                        " UNION " +
                        " SELECT COUNT(*) FROM two_weeks_availability_halls_waterloo WHERE AVAILABLE = 1 AND MONTH = ? AND DATE <= ? AND HALL = ?";
                prst = connection.prepareStatement(sql34);
                prst.setInt(1, date1.getMonth());
                prst.setInt(2, date1.getDate());
                prst.setString(3, sName);
                prst.setInt(4, date2.getMonth());
                prst.setInt(5,date2.getDate());
                prst.setString(6, sName);
            }
            else {
                sql34 = " SELECT COUNT(*) FROM two_weeks_availability_halls_waterloo WHERE AVAILABLE = 1 AND MONTH = ? AND DATE >= ? AND HALL = ? UNION";
                int iCounter = 1;
                int iSecondCounter = 0;

                for (int i = date1.getMonth() + 1; i < date2.getMonth(); i++) {
                    sql34 += " SELECT COUNT(*) FROM two_weeks_availability_halls_waterloo WHERE AVAILABLE = 1 AND MONTH = ? AND HALL = ? UNION ";
                    iSecondCounter++;
                }
                sql34 += " SELECT COUNT(*) FROM two_weeks_availability_halls_waterloo WHERE AVAILABLE = 1 AND MONTH = ? AND DATE <= ? AND HALL = ? ";


                prst = connection.prepareStatement(sql34);
                prst.setInt(iCounter, date1.getMonth());
                prst.setInt(++iCounter, date1.getDate());
                prst.setString(++iCounter, sName);
                for (int i = 1; i < iSecondCounter + 1; i++) {
                    prst.setInt(++iCounter, date2.getMonth() - i);
                    prst.setString(++iCounter, sName);
                }
                prst.setInt(++iCounter, date2.getMonth()); //check this
                prst.setInt(++iCounter, date2.getDate());    //check this
                prst.setString(++iCounter, sName);
            }
            ResultSet rst = prst.executeQuery();
            double dSum = 0.0;
            while (rst.next()){
                dSum += rst.getInt(1);
            }


            return dSum/2;
        }

        private Double d_TotalHoursOfHallsAvailable(String sStardDate, String sEndDate) throws ParseException, SQLException {
            return d_TotalHoursOfHallsAvailable_Bush_House(sStardDate,sEndDate) + d_TotalHoursOfHallsAvailable_Waterloo(sStardDate, sEndDate);
        }
        private int d_AllHallsCapacity() throws  SQLException{
            int iResult = 0;
            String sql99 = "SELECT SUM(CAPACITY) FROM FACILITIES";
            PreparedStatement prst = connection.prepareStatement(sql99);
            ResultSet rst = prst.executeQuery();
            while(rst.next()){
                iResult = rst.getInt(1);
            }
            return iResult;
        }
        private int d_SpicificHallCapacity(String sName) throws  SQLException{
            int iResult = 0;
            String sql99 = "SELECT CAPACITY FROM FACILITIES WHERE inside_code = ?";
            PreparedStatement prst = connection.prepareStatement(sql99);
            prst.setString(1, sName);
            ResultSet rst = prst.executeQuery();
            while(rst.next()){
                iResult = rst.getInt(1);
            }
            return iResult;
        }
        /**/
        private double d_capacityPerHour_Waterloo_SpecificHall(String sName,String sStartDate,String sEndDate) throws SQLException, ParseException {
            double iResult = d_SpicificHallCapacity(sName);
            double sHours = d_TotalHoursOfHallsAvailable_Waterloo_SpecificHall(sName, sStartDate, sEndDate);

            return sHours*iResult / 55;
        }
*/
